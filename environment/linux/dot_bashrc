
# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

case "$0" in
          -sh|sh|*/sh)	modules_shell=sh ;;
       -ksh|ksh|*/ksh)	modules_shell=ksh ;;
       -zsh|zsh|*/zsh)	modules_shell=zsh ;;
    -bash|bash|*/bash)	modules_shell=bash ;;
esac
module() { eval `/usr/bin/tclsh8.6 /usr/lib/x86_64-linux-gnu/modulecmd.tcl $modules_shell $*`; }

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=
HISTFILESIZE=
# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

set EDITOR='kate'
export VISUAL='kate'
export EDITOR='kate'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi


alias zipl='zip --symlinks'
alias tifon='ssh -X volker@tifon.fis.ucm.es'
alias aria='ssh -X vrath@ariadne.dias.ie'
alias dahu='ssh -Y dahu.ciment'
alias big='ssh -Y bigfoot.ciment'

alias scan_it='sudo ufw disable; scangearmp2; sudo ufw enable'

alias conda_init='. /home/vrath/bin/conda_init'
alias condi='. /home/vrath/bin/conda_init'
alias cu='/home/vrath/bin/conda_update'
alias ci='. /home/vrath/bin/conda_init'
# alias cinit='~/.Miniconda24/bin/conda init bash'

alias MTX='. /home/vrath/bin/conda_init; conda update --all --yes; conda activate MTX; conda update --all --yes; cd ~/Py4MT; spyder --new-instance --project ~/Py4MT/py4mt/ &'
alias AEM='. /home/vrath/bin/conda_init; conda update --all --yes ; conda activate AEM; conda update --all --yes; cd ~/AEMpyX; spyder --new-instance --project ~/AEMpyX/aempy/ &'
alias JAC='. /home/vrath/bin/conda_init; conda update --all --yes; conda activate JAC; conda update --all --yes; cd ~/JacoPyAn; spyder --new-instance --project ~/JacoPyAn/ &'


alias la='ls -lah'
alias md='mkdir'
alias gnome-control-center='env XDG_CURRENT_DESKTOP=GNOME gnome-control-center'

alias modclean='rm OAR*; rm Nod*; rm BAK*'
alias tor='/usr/local/tor-browser/Browser/start-tor-browser'
alias jabref='/opt/jabref/bin/JabRef'

alias nv='nordvpn'
alias nvc='nordvpn connect'
alias nvd='nordvpn disconnect'

alias inkscape='inkscape --pdf-poppler'

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

# export GCM_CREDENTIAL_STORE=gpg
export OMP_NUM_THREADS=8

export PATH="/home/vrath/bin:$PATH"

export QT_XKB_CONFIG_ROOT=/usr/share/X11/xkb

alias upintel='sudo /opt/intel/oneapi/installer/installer'
echo "   "
echo " For activating intel oneapi enter:"
alias init_intel='. /opt/intel/oneapi/setvars.sh intel64 ilp64'
#echo ". /opt/intel/oneapi/setvars.sh intel64 ilp64"
echo "init_intel"

echo "   "
alias init_nvid='NVHPCSDK=/opt/nvidia/hpc_sdk; export NVHPCSDK;MANPATH=$MANPATH:$NVHPCSDK/Linux_x86_64/23.9/compilers/man;export MANPATH;PATH=$NVHPCSDK/Linux_x86_64/23.9/compilers/bin:$PATH; export PATH;'
echo " For activating pgi/nvidia enter:"
echo "init_nvid"

export MKL_PARDISO_OOC_FILE_NAME=/tmp/.pardiso_ooc
export MKL_PARDISO_OOC_PATH=/tmp/.pardiso_ooc

export GCM_CREDENTIAL_STORE=secretservice


nordvpn set technology openvpn
nordvpn set protocol tcp  #udp



## >>> conda initialize >>>
## !! Contents within this block are managed by 'conda init' !!
#__conda_setup="$('/home/vrath/.Miniconda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)"
#if [ $? -eq 0 ]; then
    #eval "$__conda_setup"
#else
    #if [ -f "/home/vrath/.Miniconda/etc/profile.d/conda.sh" ]; then
        #. "/home/vrath/.Miniconda/etc/profile.d/conda.sh"
    #else
        #export PATH="/home/vrath/.Miniconda/bin:$PATH"
    #fi
#fi
#unset __conda_setup
## <<< conda initialize <<<
# ssh-add
# if [ $? -eq 2 ]
# then
#   echo lancement ssh-agent
#   eval $(ssh-agent)
#   ssh-add
# fi


# >>> juliaup initialize >>>

# !! Contents within this block are managed by juliaup !!

case ":$PATH:" in
    *:/home/vrath/.juliaup/bin:*)
        ;;

    *)
        export PATH=/home/vrath/.juliaup/bin${PATH:+:${PATH}}
        ;;
esac

# <<< juliaup initialize <<<
