#!/usr/bin/env python3

# ---
# jupyter:
#   jupytext:
#     cell_metadata_filter: -all
#     formats: py:light,ipynb
#     text_representation:
#       extension: .py
#       format_name: light
#       format_version: '1.5'
#       jupytext_version: 1.11.4
# ---


"""
@author: vrath Feb 2021
"""


import os
import sys
from sys import exit as error
from time import process_time
from datetime import datetime
import warnings
from cycler import cycler

import numpy
import matplotlib
import matplotlib.pyplot



AEMPYX_ROOT = os.environ["AEMPYX_ROOT"]
mypath = [AEMPYX_ROOT+"/aempy/modules/", AEMPYX_ROOT+"/aempy/scripts/"]
for pth in mypath:
    if pth not in sys.path:
        sys.path.insert(0,pth)

from version import versionstrg
import util
import prep
import aesys
import viz

warnings.simplefilter(action="ignore", category=FutureWarning)

OutInfo = True
AEMPYX_DATA = os.environ["AEMPYX_DATA"]

version, _ = versionstrg()
titstrng = util.print_title(version=version, fname=__file__, out=False)
print(titstrng+"\n\n")

now = datetime.now()

"""
input formats are .npz, .nc4, 'ascii'
"""
InFileFmt = "npz"
InStrng = " proc"
PlotStrng = " - data "+InStrng

SubDir = ["/Projects/StGormans/proc_delete_PLM3s/"]
SubDir = ["/Projects/StGormans/raw/"]
SearchStrng = "*.npz"
PlotStrng = " - data raw"

# SubDir = ["/Projects/StGormans/raw/"]
# SearchStrng = "*.npz"
# PdfCName = "StGormans_raw.pdf"
# PlotStrng = " - data raw"

# SearchStrng = "NM_A1*"SearchStrng = "NM*"
# PdfCName = "NM_A1_overlap_Catalog_raw.pdf"
# SearchStrng = "NM_A2*"
# PdfCName = "NM_A2_overlap_Catalog_rawr.pdf"
# SearchStrng = "NM_TB*"
# PdfCName = "NM_TB_overlap_Catalog_raw.pdf"

# InDatDir = AEMPYX_DATA+"/RAFTA/overlaps_proc_delete/"
# PlotDir = InDatDir+"/plot./"
# PlotStrng = " - data delete"
# SearchStrng = "NM_A1*nan.*"
# PdfCName = PlotDir+"NM_A1_overlap_Catalog_delete_linear.pdf"
# SearchStrng = "NM_A2*nan."
# PdfCName = PlotDir+"NM_A2_overlap_Catalog_delete_linear.pdf"
# SearchStrng = "NM_TB*nan.*"
# PdfCName = PlotDir+"NM_TB_overlap_Catalog_delete_linear.pdf"

# InDatDir = AEMPYX_DATA
# PlotDir = AEMPYX_DATA+"/plots/"
# PlotStrng = ""+ InStrng


# SubDir = "SubDir2"
# # SubDir2 = ["A1", "A2","A3","A4","A5","A6","A7","A8","A9","WF", "TB"]
# # SubDir2 = ["A1_NM", "A2_NM", "TB_NM"]
# SubDir2 = ["StGormans"]
# SearchStrng ="*k3*"



FilesOnly = False
PlotFmt = [".pdf", ".png", ]
PdfCatalog = True
PdfCName = "StGormans_Catalog_raw.pdf"
if ".pdf" in PlotFmt:
    pass
else:
    error(" No pdfs generated. No catalog possible!")
    PdfCatalog = False

LogPlot = False
LogSym = False
LinThresh =10.
if LogPlot == False:
    LogSym = False
Logparams=[LogPlot, LogSym, LinThresh]
QLimits = []
ILimits = []
IncludePlots = ["alt", "qdata", "idata","plm"]
PlotSize = [18., 6.]
PLimits = [0., 10.]
HLimits = [30., 90.] #[40., 140.]

DataErr = 45.0

PosDegrees = False
if PosDegrees:
    EPSG=32629

PlotThresh =10



ProfType = "distance"
if "dist" in ProfType.lower():
    ProfLabel = "profile distance (m)"
    ProfScale = 1. # 0.001  # m to km

else:
    ProfLabel= "site # (-)"
    ProfScale = 1. # 0.001  # m to km


# ProfLabel = "site # "
# ProfScale = 1. # 0.001  # m to km
# ProfUnit  = "(#)" #

"""
Determine graphical parameter.
=> print(matplotlib.pyplot.style.available)
"""

matplotlib.pyplot.style.use("seaborn-paper")
matplotlib.rcParams["figure.dpi"] = 400
matplotlib.rcParams["axes.linewidth"] = 0.5
matplotlib.rcParams["savefig.facecolor"] = "none"
Fontsize = 8
Labelsize = Fontsize
Titlesize = 8
Fontsizes = [Fontsize, Labelsize, Titlesize]

Linewidths= [0.6]
Markersize = 4

ncols = 11
Colors = matplotlib.pyplot.cm.jet(numpy.linspace(0,1,ncols))
Grey = 0.7
Lcycle =Lcycle = (cycler("linestyle", ["-", "--", ":", "-."])
          * cycler("color", ["r", "g", "b", "y"]))

"""
For just plotting to files, choose the cairo backend (eps, pdf, ,png, jpg...).
If you need to see the plot. directly (plot. window, or jupyter), simatplotliby
comment out the following line. In this case matplotlib may run into
memory problems after a few hundreds of high-resolution plot..
"""
if FilesOnly:
    matplotlib.use("cairo")

"""
Define AEM system, and optional additional parameters (e.g., Waveforms )
"""
AEM_system = 'aem05'
_,NN, _, _, _, = aesys.get_system_params(AEM_system)
nD = NN[0]


for sdir in SubDir:



    InDatDir = AEMPYX_DATA+"/"+sdir+"/"
    PlotDir = InDatDir+"/"+"plots"+"/"
    PdfCat = PlotDir+PdfCName


    print("\n\n")
    print("Data read from dir:  %s" % InDatDir)
    print("Search flightline ID string: %s " % SearchStrng)
    print("Plots written to dir: %s " % PlotDir)
    print("New flightline ID string: %s " % PlotStrng)


    if not os.path.isdir(PlotDir):
        print("File: %s does not exist, but will be created" % PlotDir)
        os.mkdir(PlotDir)

    data_files = util.get_data_list(how=["search", SearchStrng, InDatDir],
                                  out= True, sort=True)
    ns = numpy.size(data_files)


    if PdfCatalog:
        pdf_list = []

    ifl = 0
    for file in data_files:

        ifl = ifl+1
        name, ext = os.path.splitext(file)

        filein =InDatDir + file
        Data, Header, _ = aesys.read_aempy(File=filein, Format=InFileFmt,
                                       System=AEM_system, OutInfo=False)
        sD = numpy.shape(Data)
        print("flightline "+name+"  #"
              +str(ifl)+" of "
              +str(numpy.size(data_files)) +" has shape: "+str(sD))

        if numpy.size(Data)<=nD:
            print("Not enough data! Not plotted")
            continue

        anynan = numpy.argwhere(numpy.isnan(Data))
        nnans = numpy.shape(anynan)[0]
        for ii in anynan:
            Data[ii[0],3:] = numpy.nan

        if numpy.shape(Data)[0]-nnans < PlotThresh:
            print("Not enough data! Not plotted")
            continue


        if PdfCatalog:
            pdf_list.append(PlotDir+name+".pdf")

        fline = Data[:, 0]
        Data[:, 1] = Data[:, 1] * ProfScale
        Data[:, 2] = Data[:, 2] * ProfScale

        viz.plot_flightline_aem05(
            PlotName = name,
            PlotDir = PlotDir,
            PlotFmt=PlotFmt,
            IncludePlots=IncludePlots,
            PlotSize = PlotSize,
            DataObs=Data,
            DataCal=[],
            QLimits =[],
            ILimits =[],
            DLimits = [],
            HLimits = HLimits,
            ProfLabel=ProfLabel,
            Colors=Colors,
            Linewidths=Linewidths,
            Fontsizes=Fontsizes,
            Logparams=Logparams,
            PlotStrng=PlotStrng,
            PlotPLM = True
            PLimits = PLimits)


if PdfCatalog:
    viz.make_pdf_catalog(PdfList=pdf_list, FileName=PdfCat)
